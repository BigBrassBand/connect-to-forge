{
  "asapIssuers": [
    "jswdd-semantic-test",
    "micros/oauth2-consent",
    "micros-group/jswdd",
    "micros/caas-extension-types",
    "micros/pf-directory-service",
    "micros-group/jira",
    "micros/jira",
    "synthetic-checks",
    "micros/jswdd-processor",
    "micros/hudson",
    "platform-testing",
    "micros/jira-dw-workflow",
    "micros/jira-demux-service",
    "micros/xen-lifecycle-service",
    "micros/jsd-parachute"
  ],
  "moduleTypes": {
    "connect-jira:keyboardShortcuts": {
      "schema": {
        "properties": {
          "shortcut": {
            "pattern": "[a-z]{1,3}",
            "maxLength": 3,
            "type": "string",
            "fieldDescription": "\n\nThe shortcut sequence. The current limitations are\n\n <ul>\n     <li>the sequence cannot shadow an existing product shortcut</li>\n     <li>can only contain lowercase letters</li>\n     <li>has to be shorter than 4 characters</li>\n </ul>\n\n"
          },
          "context": {
            "enum": [
              "global",
              "GLOBAL",
              "issue_navigation",
              "ISSUE_NAVIGATION",
              "issue_action",
              "ISSUE_ACTION",
              "agile_board",
              "AGILE_BOARD"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe context in which the shortcut will be available. This is optional, if not given the shortcut is assumed to be global.\n Different products define different contexts.\n\n Jira supported contexts:\n <ul>\n     <li>global</li>\n     <li>issue&#95;navigation</li>\n     <li>issue&#95;action</li>\n     <li>agile&#95;board</li>\n </ul>\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "target": {
            "properties": {
              "key": {
                "pattern": "^[a-zA-Z0-9-]+$",
                "maxLength": 1000,
                "type": "string",
                "fieldDescription": "\n\nThe key of the target module, defined in the add-on descriptor.\n\n"
              }
            },
            "required": [
              "key"
            ],
            "shortClassName": "keyboardShortcutTargetBean",
            "type": "object",
            "title": "Keyboard Shortcut Target",
            "description": "\n\nThe bean containing the key of the target module of the shortcut.\n\n",
            "fieldDescription": "\n\nThe target must be the key of another module defined by the add-on.\n\n Below are the actions which will be executed by the shortcut depending on the module type of the target.\n\n <ul>\n  <li>General Page: Navigates to the general page</li>\n  <li>Dialog: Opens the dialog</li>\n  <li>Web Item: Emulates clicking on the web item, which must be present on the current page</li>\n </ul>\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:adminPages": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
            "defaultValue": "100"
          },
          "fullPage": {
            "type": "boolean",
            "fieldDescription": "\n\nAllows the add-on to explicitly request any product-added header, margins or padding be removed.\n Currently only takes affect on:\n <ul>\n     <li>Confluence Admin Pages</li>\n     <li>Confluence Configure Pages</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the page's link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console.\n\n Find product locations with the web fragment finder:\n\n <ul>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n If the <code>location</code> property is not specified, a default location is used:\n\n Jira:\n\n <ul>\n <li><code>generalPage</code>: system.top.navigation.bar</li>\n <li><code>adminPage</code>: advanced\\_menu\\_section/advanced_section</li>\n </ul>\n\n Confluence:\n\n <ul>\n <li><code>generalPage</code>: system.help/pages</li>\n <li><code>adminPage</code>: system.admin/marketplace_confluence</li>\n </ul>\n\n You may wish to have no link to the page shown anywhere - for example, if you are using the page as the\n target of a <a href=\"../../jsapi/dialog/\">JavaScript API dialog</a>.\n In this case, set the value of <code>location</code> to \"none\".\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nConditions can be added to display only when all the given conditions are true.\n\nThe supported conditions for pages are:\n\n<strong>Common conditions</strong>\n\n<ul>\n    <li><code>addon_property_exists</code></li>\n    <li><code>addon_property_equal_to</code></li>\n    <li><code>addon_property_equal_to_context</code></li>\n    <li><code>addon_property_contains_any</code></li>\n    <li><code>addon_property_contains_all</code></li>\n    <li><code>addon_property_contains_context</code></li>\n    <li><code>addon_property_contains_any_user_group</code></li>\n    <li><code>user_is_admin</code></li>\n    <li><code>user_is_logged_in</code></li>\n    <li><code>user_is_sysadmin</code></li>\n    <li><code>addon_is_licensed</code></li>\n    <li><code>feature_flag</code></li>\n</ul>\n\n<strong>Jira conditions</strong>\n\n<ul>\n    <li><code>entity_property_exists</code></li>\n    <li><code>entity_property_equal_to</code></li>\n    <li><code>entity_property_equal_to_context</code></li>\n    <li><code>entity_property_contains_any</code></li>\n    <li><code>entity_property_contains_all</code></li>\n    <li><code>entity_property_contains_context</code></li>\n    <li><code>entity_property_contains_any_user_group</code></li>\n    <li><code>can_use_application</code></li>\n    <li><code>project_type</code></li>\n    <li><code>has_global_permission</code></li>\n</ul>\n\n<strong>Confluence conditions</strong>\n\n<ul>\n    <li><code>content_property_exists</code></li>\n    <li><code>content_property_equal_to</code></li>\n    <li><code>content_property_equal_to_context</code></li>\n    <li><code>content_property_contains_any</code></li>\n    <li><code>content_property_contains_all</code></li>\n    <li><code>content_property_contains_context</code></li>\n    <li><code>content_property_contains_any_user_group</code></li>\n    <li><code>space_property_exists</code></li>\n    <li><code>space_property_equal_to</code></li>\n    <li><code>space_property_equal_to_context</code></li>\n    <li><code>space_property_contains_any</code></li>\n    <li><code>space_property_contains_all</code></li>\n    <li><code>space_property_contains_context</code></li>\n    <li><code>space_property_contains_any_user_group</code></li>\n</ul>\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe url to retrieve the content from.\n This must be relative to the add-on's baseUrl.\n\n"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:webPanels": {
      "schema": {
        "properties": {
          "layout": {
            "$ref": "#/definitions/webPanelLayout",
            "fieldDescription": "\n\nThe width and height of the web panel on the page.\n\n"
          },
          "tooltip": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nInformation about the web panel that will be shown when hovering over its header\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which web panels appear. Web panels are displayed top to bottom or left to right in order\n of ascending weight. The \"lightest\" weight is displayed first, while the \"heaviest\" weights sink to the bottom.\n The weight values for most panels start from 100, and the weights for the links generally start from 10. The\n weight is incremented by 10 for each in sequence to leave room for custom panels.\n\n"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\n<p>Location in the application interface for this panel.</p>\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "supportsNative": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecifies whether the web panel will be shown in the native apps. As of now, this will only support the Jira\n mobile and desktop clients. The web panel is required to have <code>atl.jira.view.issue.right.context</code> or\n <code>atl.jira.view.issue.left.context</code> as the location.\n\n Web panels with the <code>atl.jira.view.issue.right.context</code> location will be shown in Jira for iOS/Mac\n version 109 or later and Jira for Android version 55 or later.\n\n Web panels with the <code>atl.jira.view.issue.left.context</code> location will be shown in  Jira for Android\n version 63 or later. It is not yet available in Jira for iOS/Mac but we will update this documentation when it is.\n \n Read about [enabling your addon for the Jira mobile and desktop clients](/cloud/jira/platform/developing-apps-for-jira-cloud-mobile/).\n\n",
            "defaultValue": "false"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe URL of the add-on resource that provides the web panel content. This URL must be relative to the add-on's \n baseUrl and can use <a href=\"../../context-parameters/\">context parameters</a>.\n\n"
          }
        },
        "definitions": {
          "webPanelLayout": {
            "properties": {
              "width": {
                "maxLength": 10,
                "type": "string",
                "fieldDescription": "\n\n"
              },
              "height": {
                "maxLength": 10,
                "type": "string",
                "fieldDescription": "\n\n"
              }
            },
            "shortClassName": "webPanelLayout",
            "type": "object",
            "title": "Web Panel Layout",
            "description": "\n\n<h3>Example</h3>\n\n\n\n\n\n    {\n      \"layout\": {\n        \"width\": \"100\",\n        \"height\": \"200\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:webhooks": {
      "schema": {
        "properties": {
          "filter": {
            "maxLength": 10000,
            "type": "string",
            "fieldDescription": "\n\nFilter for entities that the webhook will be triggered for. Refer to the documentation on <a href=\"#Filtering\">filtering</a> for details.\n\n"
          },
          "excludeBody": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecifies if webhook will send JSON body when triggered. By default, a webhook will send a request with a JSON body.\n\n",
            "defaultValue": "false"
          },
          "event": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nSpecifies the named event you would like to listen to (e.g., \"enabled\", \"jira:issue\\_created\", etc.)\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nList of conditions which must be true for the webhook to fire\n\n"
          },
          "propertyKeys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "fieldDescription": "\n\nSpecifies entity properties which will be returned inside JSON body. If not specified no properties will be returned.\n\n Currently this is supported only in Jira webhooks, for all events that support <a href=\"/cloud/jira/platform/jira-entity-properties/\">Entity Properties</a>.\n Note that properties won't be returned for entity-deleted events, since the properties are already deleted by the time the webhook is sent.\n\n"
          },
          "url": {
            "type": "string",
            "fieldDescription": "\n\nSpecifies your add-on's POST webhook handler URL. This property must be a URL relative to the add-on's baseUrl.\n\n"
          }
        },
        "definitions": {
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:postInstallPage": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
            "defaultValue": "100"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the page's link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console.\n\n Find product locations with the web fragment finder:\n\n <ul>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n If the <code>location</code> property is not specified, a default location is used:\n\n Jira:\n\n <ul>\n <li><code>generalPage</code>: system.top.navigation.bar</li>\n <li><code>adminPage</code>: advanced\\_menu\\_section/advanced_section</li>\n </ul>\n\n Confluence:\n\n <ul>\n <li><code>generalPage</code>: system.help/pages</li>\n <li><code>adminPage</code>: system.admin/marketplace_confluence</li>\n </ul>\n\n You may wish to have no link to the page shown anywhere - for example, if you are using the page as the\n target of a <a href=\"../../jsapi/dialog/\">JavaScript API dialog</a>.\n In this case, set the value of <code>location</code> to \"none\".\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nConditions can be added to display only when all the given conditions are true.\n\nThe supported conditions for pages are:\n\n<strong>Common conditions</strong>\n\n<ul>\n    <li><code>addon_property_exists</code></li>\n    <li><code>addon_property_equal_to</code></li>\n    <li><code>addon_property_equal_to_context</code></li>\n    <li><code>addon_property_contains_any</code></li>\n    <li><code>addon_property_contains_all</code></li>\n    <li><code>addon_property_contains_context</code></li>\n    <li><code>addon_property_contains_any_user_group</code></li>\n    <li><code>user_is_admin</code></li>\n    <li><code>user_is_logged_in</code></li>\n    <li><code>user_is_sysadmin</code></li>\n    <li><code>addon_is_licensed</code></li>\n    <li><code>feature_flag</code></li>\n</ul>\n\n<strong>Jira conditions</strong>\n\n<ul>\n    <li><code>entity_property_exists</code></li>\n    <li><code>entity_property_equal_to</code></li>\n    <li><code>entity_property_equal_to_context</code></li>\n    <li><code>entity_property_contains_any</code></li>\n    <li><code>entity_property_contains_all</code></li>\n    <li><code>entity_property_contains_context</code></li>\n    <li><code>entity_property_contains_any_user_group</code></li>\n    <li><code>can_use_application</code></li>\n    <li><code>project_type</code></li>\n    <li><code>has_global_permission</code></li>\n</ul>\n\n<strong>Confluence conditions</strong>\n\n<ul>\n    <li><code>content_property_exists</code></li>\n    <li><code>content_property_equal_to</code></li>\n    <li><code>content_property_equal_to_context</code></li>\n    <li><code>content_property_contains_any</code></li>\n    <li><code>content_property_contains_all</code></li>\n    <li><code>content_property_contains_context</code></li>\n    <li><code>content_property_contains_any_user_group</code></li>\n    <li><code>space_property_exists</code></li>\n    <li><code>space_property_equal_to</code></li>\n    <li><code>space_property_equal_to_context</code></li>\n    <li><code>space_property_contains_any</code></li>\n    <li><code>space_property_contains_all</code></li>\n    <li><code>space_property_contains_context</code></li>\n    <li><code>space_property_contains_any_user_group</code></li>\n</ul>\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe url to retrieve the content from.\n This must be relative to the add-on's baseUrl.\n\n"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:webSections": {
      "schema": {
        "properties": {
          "tooltip": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe internationalised text to be used in the link's tooltip.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\n<p>Determines the order in which the web section appears in the menu or list.</p>\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items, while the \"heaviest\"\n weights sink to the bottom of the menu or list.</p>\n\n <p>Built-in web sections have weights that are incremented by numbers that leave room for additional sections, such\n as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears in a sensible order given\n existing items.</p>\n\n",
            "defaultValue": "100"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the web section should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:generalPages": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
            "defaultValue": "100"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the page's link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console.\n\n Find product locations with the web fragment finder:\n\n <ul>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n If the <code>location</code> property is not specified, a default location is used:\n\n Jira:\n\n <ul>\n <li><code>generalPage</code>: system.top.navigation.bar</li>\n <li><code>adminPage</code>: advanced\\_menu\\_section/advanced_section</li>\n </ul>\n\n Confluence:\n\n <ul>\n <li><code>generalPage</code>: system.help/pages</li>\n <li><code>adminPage</code>: system.admin/marketplace_confluence</li>\n </ul>\n\n You may wish to have no link to the page shown anywhere - for example, if you are using the page as the\n target of a <a href=\"../../jsapi/dialog/\">JavaScript API dialog</a>.\n In this case, set the value of <code>location</code> to \"none\".\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nConditions can be added to display only when all the given conditions are true.\n\nThe supported conditions for pages are:\n\n<strong>Common conditions</strong>\n\n<ul>\n    <li><code>addon_property_exists</code></li>\n    <li><code>addon_property_equal_to</code></li>\n    <li><code>addon_property_equal_to_context</code></li>\n    <li><code>addon_property_contains_any</code></li>\n    <li><code>addon_property_contains_all</code></li>\n    <li><code>addon_property_contains_context</code></li>\n    <li><code>addon_property_contains_any_user_group</code></li>\n    <li><code>user_is_admin</code></li>\n    <li><code>user_is_logged_in</code></li>\n    <li><code>user_is_sysadmin</code></li>\n    <li><code>addon_is_licensed</code></li>\n    <li><code>feature_flag</code></li>\n</ul>\n\n<strong>Jira conditions</strong>\n\n<ul>\n    <li><code>entity_property_exists</code></li>\n    <li><code>entity_property_equal_to</code></li>\n    <li><code>entity_property_equal_to_context</code></li>\n    <li><code>entity_property_contains_any</code></li>\n    <li><code>entity_property_contains_all</code></li>\n    <li><code>entity_property_contains_context</code></li>\n    <li><code>entity_property_contains_any_user_group</code></li>\n    <li><code>can_use_application</code></li>\n    <li><code>project_type</code></li>\n    <li><code>has_global_permission</code></li>\n</ul>\n\n<strong>Confluence conditions</strong>\n\n<ul>\n    <li><code>content_property_exists</code></li>\n    <li><code>content_property_equal_to</code></li>\n    <li><code>content_property_equal_to_context</code></li>\n    <li><code>content_property_contains_any</code></li>\n    <li><code>content_property_contains_all</code></li>\n    <li><code>content_property_contains_context</code></li>\n    <li><code>content_property_contains_any_user_group</code></li>\n    <li><code>space_property_exists</code></li>\n    <li><code>space_property_equal_to</code></li>\n    <li><code>space_property_equal_to_context</code></li>\n    <li><code>space_property_contains_any</code></li>\n    <li><code>space_property_contains_all</code></li>\n    <li><code>space_property_contains_context</code></li>\n    <li><code>space_property_contains_any_user_group</code></li>\n</ul>\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe url to retrieve the content from.\n This must be relative to the add-on's baseUrl.\n\n"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:webItems": {
      "schema": {
        "properties": {
          "styleClasses": {
            "items": {
              "pattern": "^[_a-zA-Z]+[_a-zA-Z0-9-]*$",
              "maxLength": 1000,
              "type": "string"
            },
            "type": "array",
            "fieldDescription": "\n\nSpecifies custom styles for the web item target page, if desired. By default, the web item content gets\n styled in the default style of the target application.\n It must only contain alphanumeric characters, dashes, underscores\n and must only start with alpha characters or underscores.\n\n"
          },
          "tooltip": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe internationalised text to be used in the link's tooltip.\n\n"
          },
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n are 16 by 16 pixels.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the web item appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
            "defaultValue": "100"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "type": "string",
            "fieldDescription": "\n\nSpecifies the destination of the web item. The interpretation of this field depends on the value of the\n <pre>context</pre> field.\n\n <p>\n     This field is required if the <code>target</code> of the item is not a\n     <a href=\"../dialog/\"><code>Dialog Module</code></a>.\n </p>\n\n Your add-on can receive [additional context](../../context-parameters/) from the application by\n using variable tokens in the URL attribute.\n\n"
          },
          "target": {
            "properties": {
              "options": {
                "type": "object",
                "fieldDescription": "\n\n<p>An object containing options which vary based on the type of web item target you are implementing.</p>\n\n <p>Currently-allowed options are:</p>\n <ul>\n     <li><a href=\"../inline-dialog-options/\">Inline Dialog Options</a> when type is \"inlinedialog\", and</li>\n     <li><a href=\"../dialog-options/\">Dialog Options</a> when type is \"dialog\"</li>\n     <li><a href=\"../dialog-module-options/\">Dialog Module Options</a> when type is \"dialogmodule\"</li>\n </ul>\n\n",
                "anyOf": [
                  {
                    "properties": {
                      "offsetX": {
                        "maxLength": 10,
                        "type": "string",
                        "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the x-axis in pixels\n\n"
                      },
                      "offsetY": {
                        "maxLength": 10,
                        "type": "string",
                        "fieldDescription": "\n\nSets an offset distance of the inline-dialog from the trigger element along the y-axis in pixels\n\n"
                      },
                      "width": {
                        "maxLength": 10,
                        "type": "string",
                        "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                      },
                      "onTop": {
                        "type": "boolean",
                        "fieldDescription": "\n\nDetermines if the dialog should be shown above the trigger or not. If this option is true but there is insufficient room above the trigger the inline-dialog will be flipped to display below it\n\n"
                      },
                      "showDelay": {
                        "type": "integer",
                        "fieldDescription": "\n\nDetermines how long in milliseconds after a show trigger is fired (such as a trigger click) until the dialog is shown\n\n"
                      },
                      "closeOthers": {
                        "type": "boolean",
                        "fieldDescription": "\n\nDetermines if all other dialogs on the screen are closed when this one is opened\n\n"
                      },
                      "persistent": {
                        "type": "boolean",
                        "fieldDescription": "\n\nThis option, ignores the 'closeOthers' option\n\n"
                      },
                      "onHover": {
                        "type": "boolean",
                        "fieldDescription": "\n\nDetermines whether the inline-Dialog will show on a mouseOver or mouseClick of the trigger\n\n"
                      },
                      "isRelativeToMouse": {
                        "type": "boolean",
                        "fieldDescription": "\n\nDetermines if the dialog should be shown relative to where the mouse is at the time of the event trigger (normally a click) if set to false the dialog will show aligned to the left of the trigger with the arrow showing at the center\n\n"
                      }
                    },
                    "shortClassName": "inlineDialogOptions",
                    "type": "object",
                    "title": "Inline Dialog Options",
                    "description": "\n\nOptions for an inline dialog target\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n"
                  },
                  {
                    "properties": {
                      "key": {
                        "maxLength": 100,
                        "type": "string",
                        "fieldDescription": "\n\n<p>The key of a <a href=\"../dialog/\">Dialog</a> module declared in this Connect add-on.</p>\n\n <p>\n The dialog module will include the <a href=\"../dialog-options/\">Dialog Options</a>\n that would otherwise need to be specified directly in this options object.\n </p>\n\n"
                      }
                    },
                    "required": [
                      "key"
                    ],
                    "shortClassName": "dialogModuleOptions",
                    "type": "object",
                    "title": "Dialog Module Options",
                    "description": "\n\nOptions for a web-item targeting a common <a href=\"../dialog/\">dialog module</a>.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n"
                  },
                  {
                    "properties": {
                      "size": {
                        "enum": [
                          "small",
                          "SMALL",
                          "medium",
                          "MEDIUM",
                          "large",
                          "LARGE",
                          "x-large",
                          "X-LARGE",
                          "fullscreen",
                          "FULLSCREEN",
                          "maximum",
                          "MAXIMUM"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nSets the size of the dialog.\n\n <p>\n     This option is used instead of the 'height' and 'width' options.\n </p>\n\n"
                      },
                      "chrome": {
                        "type": "boolean",
                        "fieldDescription": "\n\nWhether the dialog should contain the AUI header and buttons.\n\n",
                        "defaultValue": "true"
                      },
                      "width": {
                        "maxLength": 10,
                        "type": "string",
                        "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
                      },
                      "header": {
                        "$ref": "#/definitions/i18nProperty",
                        "fieldDescription": "\n\nThe header text for the dialog, if chrome is enabled.\n\n"
                      },
                      "height": {
                        "maxLength": 10,
                        "type": "string",
                        "fieldDescription": "\n\nSets how high the dialog is in pixels\n\n"
                      }
                    },
                    "shortClassName": "dialogOptions",
                    "type": "object",
                    "title": "Dialog Options",
                    "description": "\n\nOptions for a modal dialog <a href=\"../web-item-target/\">web item target</a> or <a href=\"../dialog/\">common module</a>.\n\n <p>\n     These options are a subset of those available via the <a href=\"../../jsapi/dialog/\">JavaScript API</a>.\n </p>\n\n <h2>Web Item Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n"
                  }
                ]
              },
              "type": {
                "enum": [
                  "page",
                  "PAGE",
                  "dialog",
                  "DIALOG",
                  "inlinedialog",
                  "INLINEDIALOG",
                  "dialogmodule",
                  "DIALOGMODULE"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines how the web-item content should be loaded by the page. By default, the web-item is loaded in the same\n page. The target can be set to open the web-item url as a modal dialog or an inline dialog.\n\n",
                "defaultValue": "page"
              }
            },
            "shortClassName": "webItemTargetBean",
            "type": "object",
            "title": "Web Item Target",
            "description": "\n\nDefines the way a <a href=\"../web-item/\">web item</a> link is opened in the browser, such as in a modal or inline dialog.\n\n <h2>Inline Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"inlinedialog\",\n        \"options\": {\n          \"onHover\": true,\n          \"offsetX\": \"30px\",\n          \"offsetY\": \"20px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Common Dialog Module Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialogmodule\",\n        \"options\": {\n          \"key\": \"dialog-module-key\"\n        }\n      }\n    }\n\n\n\n\n <p>More details for this use-case can be found on the <a href=\"../dialog/\">Dialog Module</a> page.</p>\n\n",
            "fieldDescription": "\n\nDefines the behaviour when the item is triggered.\n If omitted, the url behaves as a regular hyperlink.\n\n"
          },
          "context": {
            "enum": [
              "page",
              "PAGE",
              "addon",
              "ADDON",
              "product",
              "PRODUCT"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe context for the URL parameter. Not applicable if an absolute URL is specified. Possible values\n <ul>\n     <li><pre>addon</pre> - a URL relative to the add-on's base URL</li>\n     <li><pre>page</pre> - targets a Page module by specifying the Page's module key as the URL</li>\n     <li><pre>product</pre> - a URL relative to the product's base URL</li>\n </ul>\n\n",
            "defaultValue": "addon"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the web item should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations\".\n For example, the `system.admin/globalsettings` location is in the administrative\n menu on the left side of the Administration Console.\n\n Find product locations with the Web Fragment Finder\n\n <ul>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n     <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "properties": {
                    "condition": {
                      "maxLength": 100,
                      "type": "string",
                      "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
                    },
                    "invert": {
                      "type": "boolean",
                      "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                      "defaultValue": "false"
                    },
                    "params": {
                      "additionalProperties": true,
                      "type": "object",
                      "fieldTitle": "Object",
                      "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
                    }
                  },
                  "required": [
                    "condition"
                  ],
                  "shortClassName": "singleConditionBean",
                  "type": "object",
                  "title": "Single Condition",
                  "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
                },
                {
                  "properties": {
                    "conditions": {
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "properties": {
                              "conditions": {
                                "items": {
                                  "type": "object",
                                  "anyOf": [
                                    {
                                      "$ref": "#"
                                    },
                                    {
                                      "$ref": "#/definitions/singleCondition"
                                    }
                                  ]
                                },
                                "type": "array",
                                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                              },
                              "type": {
                                "enum": [
                                  "and",
                                  "AND",
                                  "or",
                                  "OR"
                                ],
                                "type": "string",
                                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                              }
                            },
                            "shortClassName": "compositeConditionBean",
                            "type": "object",
                            "title": "Composite Condition",
                            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                          },
                          {
                            "$ref": "#/definitions/singleCondition"
                          }
                        ]
                      },
                      "type": "array",
                      "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                    },
                    "type": {
                      "enum": [
                        "and",
                        "AND",
                        "or",
                        "OR"
                      ],
                      "type": "string",
                      "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                    }
                  },
                  "shortClassName": "compositeConditionBean",
                  "type": "object",
                  "title": "Composite Condition",
                  "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:configurePage": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nAn optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the page's link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.\n\n",
            "defaultValue": "100"
          },
          "fullPage": {
            "type": "boolean",
            "fieldDescription": "\n\nAllows the add-on to explicitly request any product-added header, margins or padding be removed.\n Currently only takes affect on:\n <ul>\n     <li>Confluence Admin Pages</li>\n     <li>Confluence Configure Pages</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "fieldDescription": "\n\nThe location in the application interface where the page's link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console.\n\n Find product locations with the web fragment finder:\n\n <ul>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder/cloud/overview\">Jira Locations</a></li>\n  <li><a href=\"https://marketplace.atlassian.com/plugins/com.wittified.webfragment-finder-confluence/cloud/overview\">Confluence locations</a></li>\n </ul>\n\n If the <code>location</code> property is not specified, a default location is used:\n\n Jira:\n\n <ul>\n <li><code>generalPage</code>: system.top.navigation.bar</li>\n <li><code>adminPage</code>: advanced\\_menu\\_section/advanced_section</li>\n </ul>\n\n Confluence:\n\n <ul>\n <li><code>generalPage</code>: system.help/pages</li>\n <li><code>adminPage</code>: system.admin/marketplace_confluence</li>\n </ul>\n\n You may wish to have no link to the page shown anywhere - for example, if you are using the page as the\n target of a <a href=\"../../jsapi/dialog/\">JavaScript API dialog</a>.\n In this case, set the value of <code>location</code> to \"none\".\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nConditions can be added to display only when all the given conditions are true.\n\nThe supported conditions for pages are:\n\n<strong>Common conditions</strong>\n\n<ul>\n    <li><code>addon_property_exists</code></li>\n    <li><code>addon_property_equal_to</code></li>\n    <li><code>addon_property_equal_to_context</code></li>\n    <li><code>addon_property_contains_any</code></li>\n    <li><code>addon_property_contains_all</code></li>\n    <li><code>addon_property_contains_context</code></li>\n    <li><code>addon_property_contains_any_user_group</code></li>\n    <li><code>user_is_admin</code></li>\n    <li><code>user_is_logged_in</code></li>\n    <li><code>user_is_sysadmin</code></li>\n    <li><code>addon_is_licensed</code></li>\n    <li><code>feature_flag</code></li>\n</ul>\n\n<strong>Jira conditions</strong>\n\n<ul>\n    <li><code>entity_property_exists</code></li>\n    <li><code>entity_property_equal_to</code></li>\n    <li><code>entity_property_equal_to_context</code></li>\n    <li><code>entity_property_contains_any</code></li>\n    <li><code>entity_property_contains_all</code></li>\n    <li><code>entity_property_contains_context</code></li>\n    <li><code>entity_property_contains_any_user_group</code></li>\n    <li><code>can_use_application</code></li>\n    <li><code>project_type</code></li>\n    <li><code>has_global_permission</code></li>\n</ul>\n\n<strong>Confluence conditions</strong>\n\n<ul>\n    <li><code>content_property_exists</code></li>\n    <li><code>content_property_equal_to</code></li>\n    <li><code>content_property_equal_to_context</code></li>\n    <li><code>content_property_contains_any</code></li>\n    <li><code>content_property_contains_all</code></li>\n    <li><code>content_property_contains_context</code></li>\n    <li><code>content_property_contains_any_user_group</code></li>\n    <li><code>space_property_exists</code></li>\n    <li><code>space_property_equal_to</code></li>\n    <li><code>space_property_equal_to_context</code></li>\n    <li><code>space_property_contains_any</code></li>\n    <li><code>space_property_contains_all</code></li>\n    <li><code>space_property_contains_context</code></li>\n    <li><code>space_property_contains_any_user_group</code></li>\n</ul>\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe url to retrieve the content from.\n This must be relative to the add-on's baseUrl.\n\n"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:dialogs": {
      "schema": {
        "properties": {
          "options": {
            "$ref": "#/definitions/dialogOptions",
            "fieldDescription": "\n\n<p>An object containing options for this dialog.</p>\n\n"
          },
          "cacheable": {
            "type": "boolean",
            "fieldDescription": "\n\nReturns whether the URL should be cacheable. Cacheable URLs are taken directly from the add-on descriptor, and\n lack all additional query parameters:\n <ul>\n     <li>standard iframe query parameters</li>\n     <li>product context parameters</li>\n     <li>JWT token</li>\n </ul>\n\n",
            "defaultValue": "false"
          },
          "url": {
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL of the content displayed in the dialog. The URL can be absolute or relative to either the\n product URL or the add-on's base URL, depending on the _context_ attribute.\n\n Your add-on can receive <a href=\"../../context-parameters/\">additional context</a> from the application by\n using variable tokens in the URL attribute.\n\n"
          }
        },
        "definitions": {
          "dialogOptions": {
            "properties": {
              "size": {
                "enum": [
                  "small",
                  "SMALL",
                  "medium",
                  "MEDIUM",
                  "large",
                  "LARGE",
                  "x-large",
                  "X-LARGE",
                  "fullscreen",
                  "FULLSCREEN",
                  "maximum",
                  "MAXIMUM"
                ],
                "type": "string",
                "fieldDescription": "\n\nSets the size of the dialog.\n\n <p>\n     This option is used instead of the 'height' and 'width' options.\n </p>\n\n"
              },
              "chrome": {
                "type": "boolean",
                "fieldDescription": "\n\nWhether the dialog should contain the AUI header and buttons.\n\n",
                "defaultValue": "true"
              },
              "width": {
                "maxLength": 10,
                "type": "string",
                "fieldDescription": "\n\nSets how wide the dialog is in pixels.\n\n"
              },
              "header": {
                "$ref": "#/definitions/i18nProperty",
                "fieldDescription": "\n\nThe header text for the dialog, if chrome is enabled.\n\n"
              },
              "height": {
                "maxLength": 10,
                "type": "string",
                "fieldDescription": "\n\nSets how high the dialog is in pixels\n\n"
              }
            },
            "shortClassName": "dialogOptions",
            "type": "object",
            "title": "Dialog Options",
            "description": "\n\nOptions for a modal dialog <a href=\"../web-item-target/\">web item target</a> or <a href=\"../dialog/\">common module</a>.\n\n <p>\n     These options are a subset of those available via the <a href=\"../../jsapi/dialog/\">JavaScript API</a>.\n </p>\n\n <h2>Web Item Example</h2>\n\n\n\n\n\n    {\n      \"target\": {\n        \"type\": \"dialog\",\n        \"options\": {\n          \"height\": \"100px\",\n          \"width\": \"200px\"\n        }\n      }\n    }\n\n\n\n\n <h2>Dialog Example</h2>\n\n\n\n\n\n    {\n      \"modules\": {\n        \"dialogs\": [\n          {\n            \"url\": \"/my-dialog-content\",\n            \"options\": {\n              \"size\": \"fullscreen\",\n              \"header\": {\n                \"value\": \"Example Dialog\"\n              }\n            },\n            \"key\": \"dialog-module-key\"\n          }\n        ]\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraEntityProperties": {
      "schema": {
        "properties": {
          "entityType": {
            "enum": [
              "issue",
              "ISSUE",
              "user",
              "USER",
              "project",
              "PROJECT"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe type of the entity. The default value is issue.\n\n",
            "defaultValue": "issue"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "keyConfigurations": {
            "items": {
              "properties": {
                "propertyKey": {
                  "type": "string",
                  "fieldDescription": "\n\nThe key of the property from which the data is indexed.\n\n"
                },
                "extractions": {
                  "items": {
                    "properties": {
                      "objectName": {
                        "type": "string",
                        "fieldDescription": "\n\nThe objectName to the JSON data which is supposed to be indexed. The objectName will be the key of a flattened JSON object with '.' as the delimiter.\n\n For instance, for JSON <code>\"{\"label\": {\"color\": \"red\", \"text\":\"connect\"}}</code> the valid objectName\n referencing the color is label.color.\n\n It is important to note that the objectName can refer to an array type, where the 'type' field in the extraction should\n be the type of each element in the specified array.\n\n"
                      },
                      "alias": {
                        "type": "string",
                        "fieldDescription": "\n\nThe name, under which this property will be searchable with JQL.\n\n"
                      },
                      "type": {
                        "enum": [
                          "number",
                          "NUMBER",
                          "text",
                          "TEXT",
                          "string",
                          "STRING",
                          "user",
                          "USER",
                          "date",
                          "DATE"
                        ],
                        "type": "string",
                        "fieldDescription": "\n\nThe type of the referenced value.\n\n The type can be one of the following values:\n\n * `number`, which is indexed as a number and allows the range ordering and searching on this field.\n * `text`, which is tokenized before indexing and allows searching for particular words.\n * `string` which is indexed as is and allows searching for the exact phase only.\n * `user`, which is indexed as a user and allows user-based searching. The expected value is an _account ID_ string (a universal Atlassian user identifier).\n * `date`, which is indexed as a date and allows date range searching and ordering. The expected date format is [YYYY]-[MM]-[DD].\n The expected date time format is [YYYY]-[MM]-[DD]T[hh]:[mm] with optional offset from UTC: +/-[hh]:[mm] or `Z` for no offset.\n For reference, please see [ISO_8601 standard](http://www.w3.org/TR/NOTE-datetime).\n\n"
                      }
                    },
                    "required": [
                      "objectName",
                      "type"
                    ],
                    "shortClassName": "entityPropertyIndexExtractionConfigurationBean",
                    "type": "object",
                    "title": "Property Index",
                    "description": "\n\nDefines an entity property to be indexed by Jira. An entity property is a reference to a JSON object, which also defines it's type.\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"objectName\": \"attachment.size\",\n      \"type\": \"number\",\n      \"alias\": \"attachmentSize\"\n    }\n\n\n"
                  },
                  "type": "array",
                  "fieldDescription": "\n\nThe list with references to values of JSON object which will be indexed and the types of referenced values.\n\n"
                }
              },
              "required": [
                "propertyKey",
                "extractions"
              ],
              "shortClassName": "entityPropertyIndexKeyConfigurationBean",
              "type": "object",
              "title": "Index Key Configuration",
              "description": "\n\nDefines the list of extractors which index selected JSON objects from defined property.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"extractions\": [\n        {\n          \"objectName\": \"attachment.size\",\n          \"type\": \"number\"\n        }\n      ],\n      \"propertyKey\": \"attachment\"\n    }\n\n\n"
            },
            "type": "array",
            "fieldDescription": "\n\nList of properties from which selected values are indexed.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraFeatureFlagInfoProvider": {
      "schema": {
        "properties": {
          "homeUrl": {
            "type": "string",
            "fieldDescription": "\n\nURL to the provider's homepage\n\n"
          },
          "documentationUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to documentation about the provider's Jira integration\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "actions": {
            "$ref": "#/definitions/featureFlagProviderActionsBean",
            "fieldDescription": "\n\nOptional actions that can be performed by Jira users, e.g., link an existing flag, create a new flag, etc.\n\n"
          },
          "logoUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to the provider's logo, which will be displayed in the UI\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "featureFlagProviderActionsBean": {
            "properties": {
              "linkFlag": {
                "properties": {
                  "templateUrl": {
                    "type": "string",
                    "fieldDescription": "\n\n"
                  }
                },
                "required": [
                  "templateUrl"
                ],
                "shortClassName": "featureFlagProviderActionBean",
                "type": "object",
                "description": "\n\n<p>Defines the URL template that is used when an action is invoked. The following context parameters are supported: <code>{issue.key}</code>, <code>{issue.summary}</code>, <code>{issue.flags}</code>.</p>\n\n",
                "fieldDescription": "\n\nAction for linking an existing feature flag to a Jira issue.\n\n"
              },
              "createFlag": {
                "properties": {
                  "templateUrl": {
                    "type": "string",
                    "fieldDescription": "\n\n"
                  }
                },
                "required": [
                  "templateUrl"
                ],
                "shortClassName": "featureFlagProviderActionBean",
                "type": "object",
                "description": "\n\n<p>Defines the URL template that is used when an action is invoked. The following context parameters are supported: <code>{issue.key}</code>, <code>{issue.summary}</code>, <code>{issue.flags}</code>.</p>\n\n",
                "fieldDescription": "\n\nAction for creating a feature flag and linking it with a Jira issue.\n\n"
              },
              "listFlags": {
                "properties": {
                  "templateUrl": {
                    "type": "string",
                    "fieldDescription": "\n\n"
                  }
                },
                "required": [
                  "templateUrl"
                ],
                "shortClassName": "featureFlagProviderActionBean",
                "type": "object",
                "description": "\n\n<p>Defines the URL template that is used when an action is invoked. The following context parameters are supported: <code>{issue.key}</code>, <code>{issue.summary}</code>, <code>{issue.flags}</code>.</p>\n\n",
                "fieldDescription": "\n\nAction for showing all linked feature flags, when there are multiple feature flags linked to a Jira issue.\n\n"
              }
            },
            "shortClassName": "featureFlagProviderActionsBean",
            "type": "object",
            "title": "Feature Flag Actions",
            "description": "\n\n<p>Feature flag actions that can be performed by Jira users.</p>\n<p>Each action is optional (unless indicated otherwise). The absence of an action indicates that the action is not supported by the provider.</p>\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraProjectPermissions": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nDescription of the project permission. It will be displayed under the permission's name.\n\n"
          },
          "category": {
            "enum": [
              "projects",
              "PROJECTS",
              "issues",
              "ISSUES",
              "voters_and_watchers",
              "VOTERS_AND_WATCHERS",
              "comments",
              "COMMENTS",
              "attachments",
              "ATTACHMENTS",
              "time_tracking",
              "TIME_TRACKING",
              "other",
              "OTHER"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe category of the project permission. This determines in which section the permission will be displayed.\n\n",
            "defaultValue": "other"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraProjectPages": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nSpecifies the ordering of the link in the project sidebar.\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items, while the \"heaviest\"\n weights sink to the bottom of the menu or list.</p>\n\n",
            "defaultValue": "100"
          },
          "iconUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies an icon URL that will displayed alongside the link to the project page in the project sidebar.\n\n The icon resource provided in this field should be larger or equals to 16x16 pixels.<br>\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL targeted by the page. The URL is relative to the add-on's base URL.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraSearchRequestViews": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\nDetermines the order in which the Search Request View entry appears in the <em>Export</em> menu.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA description of your Search Request View\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "type": "string",
            "fieldDescription": "\n\nThe URL of the service that will render the representation for the result set. The URL is\n interpreted relative to the <em>baseUrl</em> in the descriptor.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueGlances": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nSpecifies an icon to display at the left of the glance view control.\n The icon resource provided in this field should be 24x24 pixels or larger, preferably in SVG format.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "content": {
            "type": "object",
            "fieldDescription": "\n\nThis content becomes the label next to the icon. It's handy for communicating a small amount of information.\n\n Read about [Issue Glance Content Label](/cloud/jira/platform/modules/issue-glance-content-label/).\n\n",
            "anyOf": [
              {
                "properties": {
                  "label": {
                    "$ref": "#/definitions/i18nProperty",
                    "fieldDescription": "\n\n"
                  },
                  "type": {
                    "enum": [
                      "label",
                      "LABEL"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nThe type field must be set to 'label'\n\n"
                  }
                },
                "required": [
                  "label",
                  "type"
                ],
                "shortClassName": "issueGlanceContentLabelBean",
                "type": "object",
                "title": "Issue Glance Content Label",
                "description": "\n\nDescribes the content for the issue glance module. It specifies static text to show inside the glance, which is left-aligned next to the icon.\n\n"
              }
            ]
          },
          "target": {
            "type": "object",
            "fieldDescription": "\n\nSpecifies the target action when clicking on the glance.\n\n Read about [Issue Glance Target Web Panel](/cloud/jira/platform/modules/issue-glance-target-web-panel/).\n\n",
            "properties": {
              "type": {
                "enum": [
                  "web_panel",
                  "WEB_PANEL"
                ],
                "type": "string",
                "fieldDescription": "\n\nThe type field must be set to 'web_panel'\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the app resource that provides the web panel content. This URL must be relative to the app's baseUrl.\n\n"
              }
            },
            "required": [
              "type",
              "url"
            ],
            "shortClassName": "issueGlanceTargetWebPanelBean",
            "title": "Issue Glance Target Web Panel",
            "description": "\n\nDescribes the target of the issue glance module. This supports displaying a web panel in the context area of the issue.\n\n"
          },
          "jiraNativeAppsEnabled": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecifies whether the issue glance will be shown in the Jira mobile and desktop clients.\n\n The issue glance will be shown in Jira for iOS/Mac version 109 or later and Jira for Android version 55 or later.\n\n Read about [enabling your addon for the Jira mobile and desktop clients](/cloud/jira/platform/developing-apps-for-jira-cloud-mobile/).\n\n",
            "defaultValue": "false"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueTabPanels": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\n<p>Determines the order in which the tab panel's link appears in the menu or list.</p>\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.</p>\n\n <p>Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.</p>\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "properties": {
                    "conditions": {
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "$ref": "#/definitions/singleCondition"
                          },
                          {
                            "properties": {
                              "conditions": {
                                "items": {
                                  "type": "object",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/singleCondition"
                                    },
                                    {
                                      "$ref": "#"
                                    }
                                  ]
                                },
                                "type": "array",
                                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                              },
                              "type": {
                                "enum": [
                                  "and",
                                  "AND",
                                  "or",
                                  "OR"
                                ],
                                "type": "string",
                                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                              }
                            },
                            "shortClassName": "compositeConditionBean",
                            "type": "object",
                            "title": "Composite Condition",
                            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                          }
                        ]
                      },
                      "type": "array",
                      "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                    },
                    "type": {
                      "enum": [
                        "and",
                        "AND",
                        "or",
                        "OR"
                      ],
                      "type": "string",
                      "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                    }
                  },
                  "shortClassName": "compositeConditionBean",
                  "type": "object",
                  "title": "Composite Condition",
                  "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                },
                {
                  "properties": {
                    "condition": {
                      "maxLength": 100,
                      "type": "string",
                      "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
                    },
                    "invert": {
                      "type": "boolean",
                      "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                      "defaultValue": "false"
                    },
                    "params": {
                      "additionalProperties": true,
                      "type": "object",
                      "fieldTitle": "Object",
                      "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
                    }
                  },
                  "required": [
                    "condition"
                  ],
                  "shortClassName": "singleConditionBean",
                  "type": "object",
                  "title": "Single Condition",
                  "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL targeted by the tab panel. The URL is relative to the add-on's base URL.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraBuildInfoProvider": {
      "schema": {
        "properties": {
          "homeUrl": {
            "type": "string",
            "fieldDescription": "\n\nURL to the provider's homepage\n\n"
          },
          "documentationUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to documentation about the provider's Jira integration\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "actions": {
            "properties": {},
            "shortClassName": "buildProviderAllActionsBean",
            "type": "object",
            "description": "\n\n<p>Build actions that can be performed by Jira users.</p>\n <p>Currently there are no actions defined for build providers. Please contact us if you need any.</p>\n\n",
            "fieldDescription": "\n\nOptional actions that can be performed by Jira users\n\n"
          },
          "logoUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to the provider's logo, which will be displayed in the UI\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraWorkflowConditions": {
      "schema": {
        "properties": {
          "view": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that shows the read-only configuration or summary of the workflow condition.\n\n The view URL can contain the following context parameters:\n\n - `condition.id`: The unique identifier of the condition.\n - `condition.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`.\n\n"
          },
          "expression": {
            "type": "string",
            "fieldDescription": "\n\nThe [Jira expression](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-api-3-expression-eval-post)\n used to evaluate the condition. Must return a boolean value.\n <p>\n This expression can be overridden using the configuration page.\n If you return configuration with property \"expression\", then that expression will be used\n to evaluate the condition instead of the expression defined here. For example:\n\n <pre><code>AP.require([\"jira\"], function(jira) {\n    jira.WorkflowConfiguration.onSave(function() {\n        var config = {\n            \"expression\": \"dynamically built expression\"\n        };\n        return JSON.stringify(config);\n    });\n});</code></pre>\n\n"
          },
          "edit": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that allows to configure the workflow condition once it exists.\n\n The edit URL can contain the following context parameters:\n\n - `condition.id`: The unique identifier of the condition.\n - `condition.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`.\n\n"
          },
          "evaluationContext": {
            "enum": [
              "user",
              "USER",
              "app",
              "APP"
            ],
            "type": "string",
            "fieldDescription": "\n\nEXPERIMENTAL. Controls how to run the expression during the transition.\n\n - `user`: The expression will be evaluated in the context of the user making the transition (default).\n - `app`: The expression will be evaluated in the context of the app user.\n\n If the expression needs to perform some operations which require permissions that the user making\n the transition might not have, choose `app` and make sure that your app has appropriate scopes.\n\n Note: regardless of the value selected here, the `user` variable in the expression always points to the user that performs the transition.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe description of the workflow condition. This will be presented to the user when they add a new condition to a Jira workflow.\n\n"
          },
          "create": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that allows to configure the workflow condition on creation.\n\n"
          }
        },
        "definitions": {
          "url": {
            "properties": {
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "urlBean",
            "type": "object",
            "title": "URL",
            "description": "\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraProjectAdminTabPanels": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\n<p>Determines the order in which the tab panel's link appears in the menu or list.</p>\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.</p>\n\n <p>Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.</p>\n\n"
          },
          "location": {
            "type": "string",
            "fieldDescription": "\n\nThe name of the group of tabs in the project configuration where the tab panel should appear.\n The following are accepted values.\n\n * `projectgroup1`\n * `projectgroup2`\n * `projectgroup3`\n * `projectgroup4`\n\nSee [Project Configuration Locations](https://developer.atlassian.com/jiradev/jira-architecture/web-fragments/project-configuration-locations#ProjectConfigurationLocations-AddingNewItemstoExistingWebSections) for details.\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL targeted by the tab panel. The URL is relative to the add-on's base URL.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraWorkflowValidators": {
      "schema": {
        "properties": {
          "view": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that shows the read-only configuration or summary of the workflow validator.\n\n The view URL can contain the following context parameters:\n\n - `validator.id`: The unique identifier of the validator.\n - `validator.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`.\n\n"
          },
          "expression": {
            "type": "string",
            "fieldDescription": "\n\nThe [Jira expression](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-api-3-expression-eval-post)\n used to evaluate the validator. Must return a boolean or string value.\n <p>\n This expression can be overridden using the configuration page.\n If you return configuration with property \"expression\", then that expression will be used\n to evaluate the validator instead of the expression defined here. For example:\n\n <pre><code>AP.require([\"jira\"], function(jira) {\n    jira.WorkflowConfiguration.onSave(function() {\n        var config = {\n            \"expression\": \"dynamically built expression\"\n        };\n        return JSON.stringify(config);\n    });\n});</code></pre>\n\n"
          },
          "edit": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that allows to configure the workflow validator once it exists.\n\n The edit URL can contain the following context parameters:\n\n - `validator.id`: The unique identifier of the validator.\n - `validator.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`.\n\n"
          },
          "evaluationContext": {
            "enum": [
              "user",
              "USER",
              "app",
              "APP"
            ],
            "type": "string",
            "fieldDescription": "\n\nEXPERIMENTAL. Controls how the expression is run during the transition:\n\n - `user`: The expression is evaluated in the context of the user making the transition (default).\n - `app`: The expression is evaluated in the context of the app user.\n\n If the expression performs operations that require permissions but\n the user making the transition cannot be guaranteed to have those permissions,\n choose `app` and make sure that your app has the appropriate scopes.\n\n Note: regardless of the value selected here, the `user` variable in the expression always points to the user that performs the transition.\n\n"
          },
          "errorMessage": {
            "type": "object",
            "fieldDescription": "\n\nThe error message that will be shown if the validator rejects the transition by returning <code>false</code>.\n <p>\n This can be either a static [i18n property](../i18n-property/), or an object containing the \"expression\" property,\n with a Jira expression that returns the error message dynamically, based on the current transition or configuration.\n\n",
            "anyOf": [
              {
                "properties": {
                  "expression": {
                    "type": "string",
                    "fieldDescription": "\n\nThe Jira expression that will return an error message if the validator rejects a transition.\n\n"
                  }
                },
                "required": [
                  "expression"
                ],
                "shortClassName": "validatorJiraExpressionErrorMessage",
                "type": "object",
                "title": "Jira Expression Error Message",
                "description": "\n\nA Jira expression that will be evaluated if the workflow validator fails.\n The string returned by the Jira expression will be displayed as the error message for the failed transition.\n\n"
              },
              {
                "properties": {
                  "value": {
                    "maxLength": 1500,
                    "type": "string",
                    "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
                  },
                  "i18n": {
                    "maxLength": 300,
                    "type": "string",
                    "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
                  }
                },
                "required": [
                  "value"
                ],
                "shortClassName": "validatorI18nErrorMessage",
                "type": "object",
                "title": "i18n Property",
                "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
              }
            ]
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe description of the workflow validator. This will be presented to the user when they add a new validator to a Jira workflow.\n\n"
          },
          "create": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the app page that allows to configure the workflow validator on creation.\n\n"
          }
        },
        "definitions": {
          "url": {
            "properties": {
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "urlBean",
            "type": "object",
            "title": "URL",
            "description": "\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraRemoteLinkInfoProvider": {
      "schema": {
        "properties": {
          "homeUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nURL to the provider's homepage\n\n"
          },
          "documentationUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nOptional URL to documentation about the provider's Jira integration\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "actions": {
            "items": {
              "properties": {
                "actionId": {
                  "type": "string",
                  "fieldDescription": "\n\n<p>A key to identify a specific action. Used for associating a specific Remote link to an action of this ID. The actionId of an action must be unique across all actions.</p>\n\n"
                },
                "actionLabel": {
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/i18nProperty",
                      "fieldDescription": "\n\n"
                    }
                  },
                  "required": [
                    "value"
                  ],
                  "shortClassName": "remoteLinkProviderActionLabelBean",
                  "type": "object",
                  "description": "\n\n",
                  "fieldDescription": "\n\n<p>The actionLabel of an Action is shown visibly to the User alongside the Remote Link.</p>\n\n"
                },
                "templateUrl": {
                  "format": "uri",
                  "type": "string",
                  "fieldDescription": "\n\n<p>The templateUrl of an Action is a template where strings can be substituted into the URL for a specific Remote Link. Strings used in the templateUrl must be passed in via an attribute map when associating an action with a remote link.</p>\n\n"
                }
              },
              "required": [
                "actionId",
                "actionLabel",
                "templateUrl"
              ],
              "shortClassName": "remoteLinkProviderActionBean",
              "type": "object",
              "description": "\n\n<p>Defines the Remote Link action that can be invoked.</p>\n\n"
            },
            "type": "array",
            "fieldDescription": "\n\nOptional actions that can be performed by Jira users on the remote link\n\n"
          },
          "logoUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nOptional URL to the provider's logo, which will be displayed in the UI\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraBackgroundScripts": {
      "schema": {
        "properties": {
          "location": {
            "type": "object",
            "fieldDescription": "\n\nSpecifies where the background script will be located inside Jira, and any location-specific configuration.\n Currently, a background script can only be located in the new issue view and on the dashboards.\n\n Read about [Issue Background Script Location](/cloud/jira/platform/modules/issue-background-script-location/).\n\n",
            "anyOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "issue_view",
                      "ISSUE_VIEW",
                      "dashboard",
                      "DASHBOARD"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nThe type field must be set to 'dashboard'\n\n"
                  }
                },
                "required": [
                  "type"
                ],
                "shortClassName": "dashboardBackgroundScriptLocationBean",
                "type": "object",
                "title": "Dashboard Background Script Location",
                "description": "\n\nDescribes the location of the dashboard background script module.\n\n"
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "issue_view",
                      "ISSUE_VIEW",
                      "dashboard",
                      "DASHBOARD"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nThe type field must be set to 'issue-view'\n\n"
                  },
                  "shouldReloadOnRefresh": {
                    "type": "boolean",
                    "fieldDescription": "\n\nWhether the background script iframe should reload when the issue is refreshed.\n\n"
                  }
                },
                "required": [
                  "type"
                ],
                "shortClassName": "issueViewBackgroundScriptLocationBean",
                "type": "object",
                "title": "Issue Background Script Location",
                "description": "\n\nDescribes the location of the issue background script module.\n\n"
              }
            ]
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe URL of the app resource that serves the iframe containing the background script.\n As with other app iframes, the iframe must load all.js.\n This URL does not support [context parameters](/cloud/jira/platform/context-parameters/).\n This URL must be relative to the app's baseUrl.\n\n"
          }
        },
        "definitions": {}
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraDeploymentInfoProvider": {
      "schema": {
        "properties": {
          "homeUrl": {
            "type": "string",
            "fieldDescription": "\n\nURL to the provider's homepage\n\n"
          },
          "documentationUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to documentation about the provider's Jira integration\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "actions": {
            "properties": {
              "listDeployments": {
                "properties": {
                  "templateUrl": {
                    "type": "string",
                    "fieldDescription": "\n\n"
                  }
                },
                "required": [
                  "templateUrl"
                ],
                "shortClassName": "deploymentProviderActionBean",
                "type": "object",
                "description": "\n\n<p>Defines the URL template that is used when an action is invoked. The following context parameters are supported: <code>{issue.key}</code>, <code>{issue.summary}</code>, <code>{issue.deployments}</code>.</p>\n\n",
                "fieldDescription": "\n\nAction for showing all linked deployments, when there are multiple deployments linked to a Jira issue.\n\n"
              }
            },
            "shortClassName": "deploymentProviderAllActionsBean",
            "type": "object",
            "description": "\n\n<p>Deployment actions that can be performed by Jira users.</p>\n<p>Each action is optional (unless indicated otherwise). The absence of an action indicates that the action is not supported by the provider.</p>\n\n",
            "fieldDescription": "\n\nOptional actions that can be performed by Jira users, e.g., list all deployments associated with the issue.\n\n"
          },
          "logoUrl": {
            "type": "string",
            "fieldDescription": "\n\nOptional URL to the provider's logo, which will be displayed in the UI\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraReports": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human-readable description of this report module. This description is displayed on the reports list.\n\n"
          },
          "reportCategory": {
            "enum": [
              "agile",
              "AGILE",
              "issue_analysis",
              "ISSUE_ANALYSIS",
              "forecast_management",
              "FORECAST_MANAGEMENT",
              "other",
              "OTHER"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe category of the report. The default category is other.\n\n",
            "defaultValue": "other"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL targeted by the report. The URL is relative to the add-on's base URL.\n\n"
          },
          "thumbnailUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL of the report thumbnail. The URL is relative to the add-on's base URL.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueContexts": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nSpecifies an icon to display at the left of the context view control.\n The icon resource provided in this field should be 24x24 pixels or larger, preferably in SVG format.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "content": {
            "type": "object",
            "fieldDescription": "\n\nThis content becomes the label next to the icon. It's handy for communicating a small amount of information.\n\n Read about [Issue Context Content Label](/cloud/jira/platform/modules/issue-glance-content-label/). // TODO BENTO-11598: change this path when doc is updated\n\n",
            "anyOf": [
              {
                "properties": {
                  "label": {
                    "$ref": "#/definitions/i18nProperty",
                    "fieldDescription": "\n\n"
                  },
                  "type": {
                    "enum": [
                      "label",
                      "LABEL"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nThe type field must be set to 'label' since we currently only support 'label' for context panel content\n\n"
                  }
                },
                "required": [
                  "label",
                  "type"
                ],
                "shortClassName": "issueContextContentLabelBean",
                "type": "object",
                "title": "Issue Context Content Label",
                "description": "\n\nDescribes the content for the issue context module. It specifies static text to show inside the context panel, which is left-aligned next to the icon.\n\n"
              }
            ]
          },
          "target": {
            "type": "object",
            "fieldDescription": "\n\nSpecifies the target action when clicking on the context.\n\n Read about [Issue Context Target Web Panel](/cloud/jira/platform/modules/issue-glance-target-web-panel/). // TODO BENTO-11598: change this path when doc is updated\n\n",
            "anyOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "web_panel",
                      "WEB_PANEL"
                    ],
                    "type": "string",
                    "fieldDescription": "\n\nThe type field must be set to 'web_panel'\n\n"
                  },
                  "url": {
                    "format": "uri",
                    "type": "string",
                    "fieldDescription": "\n\nThe URL of the app resource that provides the web panel content. This URL must be relative to the app's baseUrl.\n\n"
                  }
                },
                "required": [
                  "type",
                  "url"
                ],
                "shortClassName": "issueContextTargetWebPanelBean",
                "type": "object",
                "title": "Issue Context Target Web Panel",
                "description": "\n\nDescribes the target of the issue context module. This supports displaying a web panel in the context area of the issue.\n\n"
              }
            ]
          },
          "jiraNativeAppsEnabled": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecifies whether the issue context will be shown in the Jira mobile and desktop clients.\n\n The issue context will be shown in Jira for iOS/Mac version 109 or later and Jira for Android version 55 or later.\n\n Read about [enabling your addon for the Jira mobile and desktop clients](/cloud/jira/platform/developing-apps-for-jira-cloud-mobile/).\n\n",
            "defaultValue": "false"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraDashboardItems": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nDescription of the dashboard item. This will be displayed for a user in the directory.\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nThe URL of the service which will render the dashboard item. Following context parameters are supported in\n url.\n\n * `dashboard.id` unique id of the dashboard on which the item is rendered. This parameter is passed only on default view\n * `dashboardItem.id` unique id of the dashboard item which is rendered. This parameter is passed only on default view\n * `dashboardItem.key` key of the dashboard item. This parameter is passed in both: default and directory view\n * `dashboardItem.viewType` type of the view in which dashboard item is displayed. Default (for dashboard) and directory. This list may be extended\n\n"
          },
          "configurable": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecify if the dashboard-item is configurable or not. Configurable dashboard items should render configuration\n view if there is no configuration stored for the dashboard item. [Dashboard item properties](../../jira-rest-api-scopes/) can\n be used for configuration storage.\n\n In addition, configurable dashboard items should register a javascript callback for `edit click`.\n\n     AP.require(['jira'], function (jira) {\n        jira.DashboardItem.onDashboardItemEdit(function() {\n           // render dashboard item configuration now\n        });\n     });\n\n It is a common case to give users ability to set the name of the dashboard item. This can be achieved with a following\n JS code:\n\n     AP.require(['jira'], function(jira) {\n        jira.setDashboardItemTitle(\"Setting title works\");\n     });\n\n",
            "defaultValue": "false"
          },
          "refreshable": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecify if the dashboard-item will control the refresh. When specified, Jira won't refresh the gadget. Refreshable dashboard items should do custom refresh logic in the provided callback.\n\n     AP.require(['jira'], function (jira) {\n        jira.DashboardItem.onDashboardItemRefreshed(function() {\n           // do custom refresh logic\n        });\n     });\n\n",
            "defaultValue": "false"
          },
          "thumbnailUrl": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nURI of the dashboard item thumbnail which is displayed in the directory.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraWorkflowPostFunctions": {
      "schema": {
        "properties": {
          "view": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the add-on page that shows the read-only configuration or summary of the workflow post\n function.\n\n The view URL can contain the following context parameters:\n\n - `postFunction.id`: The unique identifier of the post function\n - `postFunction.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`\n\n"
          },
          "triggered": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the add-on resource that receives the HTTP POST after a workflow transition.\n It includes the authentication headers that enable the add-on to validate the authenticity of the request.\n\n Your app must return a success status code in response to the HTTP POST request.\n If your app doesn't send a success status code the request will retry,\n as described in the [webhook retry policy](../../webhooks#retry-policy).\n\n <h3>Contents of the HTTP POST</h3>\n\n To understand the type of content that is sent to the add-on after a state transition, you can use the Connect\n inspector tool. The [Connect inspector](http://go.atlassian.com/connect-inspector) is a service that lets you\n generate a temporary Atlassian Connect add-on that you can install in your Cloud development environment to inspect\n the content of event messages.\n\n Here is an example POST body. For brevity, some fields have been removed or truncated.\n\n    {\n        \"configuration\": {\n            \"value\": \"Configuration from the post function edit page\"\n        },\n        \"issue\": {\n            \"fields\": {\n                \"assignee\": { },\n                \"attachment\": [],\n                \"comment\": { },\n                \"components\": [],\n                \"created\": \"2013-11-18T17:56:23.864+1100\",\n                \"description\": null,\n                \"duedate\": null,\n                \"environment\": null,\n                \"fixVersions\": [],\n                \"issuetype\": { },\n                \"labels\": [],\n                \"lastViewed\": \"2013-11-18T17:56:31.793+1100\",\n                \"priority\": { },\n                \"project\": {\n                    \"avatarUrls\": { },\n                    \"id\": \"10000\",\n                    \"key\": \"TEST\",\n                    \"name\": \"Test\"\n                },\n                \"reporter\": { },\n                \"resolution\": { },\n                \"resolutiondate\": \"2013-11-18T17:56:31.799+1100\",\n                \"status\": { },\n                \"summary\": \"The issue summary\",\n                \"updated\": \"2013-11-18T17:56:23.864+1100\",\n                \"versions\": [],\n                \"votes\": { },\n                \"watches\": { },\n                \"workratio\": -1\n            },\n            \"id\": \"10000\",\n            \"key\": \"TEST-1\",\n            \"self\": \"http://issues.example.com/jira/issue/10000\"\n        },\n        \"transition\": {\n            \"from_status\": \"Open\",\n            \"to_status\": \"Resolved\",\n            \"transitionId\": 5,\n            \"transitionName\": \"Resolve Issue\",\n            \"workflowId\": 10000,\n            \"workflowName\": \"classic default workflow\"\n        }\n    }\n\n"
          },
          "edit": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the add-on page that allows to configure the workflow post function once it exists.\n\n The edit URL can contain the following context parameters:\n\n - `postFunction.id`: The unique identifier of the post function\n - `postFunction.config`: The configuration value saved to Jira after calling `WorkflowConfiguration.onSave`\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe description of the workflow post function. This will be presented to the user when they add a new post\n function to a Jira workflow.\n\n"
          },
          "create": {
            "$ref": "#/definitions/url",
            "fieldDescription": "\n\nThe relative URL to the add-on page that allows to configure the workflow post function on creation.\n\n"
          }
        },
        "definitions": {
          "url": {
            "properties": {
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "urlBean",
            "type": "object",
            "title": "URL",
            "description": "\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueContents": {
      "schema": {
        "properties": {
          "icon": {
            "$ref": "#/definitions/icon",
            "fieldDescription": "\n\nSpecifies an icon to show alongside the quick-add menu item.\n The icon should be 24x24 pixels or larger, preferably in .SVG format.\n\n"
          },
          "tooltip": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nSpecifies a tooltip for the quick-add menu item.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/singleCondition"
                },
                {
                  "$ref": "#/definitions/compositeCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "target": {
            "type": "object",
            "fieldDescription": "\n\nSpecifies the target of this content as a result of clicking on the menu item. Currently,\n you can only display a web panel in the issue's content area.\n\n Read about [Issue Page Target Web Panel](/cloud/jira/platform/modules/issue-page-target-web-panel/).\n\n",
            "properties": {
              "type": {
                "enum": [
                  "web_panel",
                  "WEB_PANEL"
                ],
                "type": "string",
                "fieldDescription": "\n\nThe type field must be set to 'web_panel'\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the add-on resource that provides the web panel content.\n This URL must be relative to the app's baseUrl.\n\n"
              }
            },
            "required": [
              "type",
              "url"
            ],
            "shortClassName": "issuePageTargetWebPanelBean",
            "title": "Issue Page Target Web Panel",
            "description": "\n\nDescribes the target of the issue content module. Supports displaying a web panel in the content area of the issue view.\n\n"
          },
          "contentPresentConditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/compositeCondition"
                },
                {
                  "$ref": "#/definitions/singleCondition"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\nSpecifies a list of [Conditions](/cloud/jira/platform/conditions/) that, when resolved to true, will\n force the content to always be displayed for that issue. Users have the ability to collapse the content\n if they don't want to see it.\n\n"
          },
          "jiraNativeAppsEnabled": {
            "type": "boolean",
            "fieldDescription": "\n\nThis is coming soon. We will update the docs here with the minimum supported Jira iOS and Android app versions\n when it is ready.\n\n Specifies whether the issue content module will be shown in the Jira mobile and desktop clients.\n\n",
            "defaultValue": "false"
          }
        },
        "definitions": {
          "icon": {
            "properties": {
              "width": {
                "type": "integer",
                "fieldDescription": "\n\nThe width in pixels of the icon image.\n\n"
              },
              "url": {
                "format": "uri",
                "type": "string",
                "fieldDescription": "\n\nThe URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on's base URL.\n\n"
              },
              "height": {
                "type": "integer",
                "fieldDescription": "\n\nThe height in pixels of the icon image.\n\n"
              }
            },
            "required": [
              "url"
            ],
            "shortClassName": "iconBean",
            "type": "object",
            "title": "Icon",
            "description": "\n\nDefines an icon to display.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"icon\": {\n        \"width\": 16,\n        \"height\": 16,\n        \"url\": \"/my-icon.png\"\n      }\n    }\n\n\n"
          },
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          },
          "compositeCondition": {
            "properties": {
              "conditions": {
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/singleCondition"
                    },
                    {
                      "$ref": "#"
                    }
                  ]
                },
                "type": "array",
                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
              },
              "type": {
                "enum": [
                  "and",
                  "AND",
                  "or",
                  "OR"
                ],
                "type": "string",
                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
              }
            },
            "shortClassName": "compositeConditionBean",
            "type": "object",
            "title": "Composite Condition",
            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraDevelopmentTool": {
      "schema": {
        "properties": {
          "capabilities": {
            "items": {
              "enum": [
                "commit",
                "COMMIT",
                "branch",
                "BRANCH",
                "pull_request",
                "PULL_REQUEST"
              ],
              "type": "string"
            },
            "type": "array",
            "fieldDescription": "\n\nWhat development information the tool offers\n\n"
          },
          "application": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nThe application behind this development tool\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "actions": {
            "$ref": "#/definitions/developmentToolModuleActionsBean",
            "fieldDescription": "\n\nOptional actions that can be performed by Jira users, e.g., create branch, etc.\n\n"
          },
          "url": {
            "type": "string",
            "fieldDescription": "\n\nA URL to the development tool\n\n"
          },
          "logoUrl": {
            "type": "string",
            "fieldDescription": "\n\nThe logo for the development tool, will be displayed in an area 16 by 16 pixels\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "developmentToolModuleActionsBean": {
            "properties": {
              "createBranch": {
                "properties": {
                  "templateUrl": {
                    "type": "string",
                    "fieldDescription": "\n\n"
                  }
                },
                "required": [
                  "templateUrl"
                ],
                "shortClassName": "developmentToolModuleActionBean",
                "type": "object",
                "description": "\n\n<p>Defines the URL template that is used when an action is invoked. The following context parameters are supported: <code>{issue.key}</code>, <code>{issue.summary}</code>.</p>\n\n",
                "fieldDescription": "\n\n"
              }
            },
            "shortClassName": "developmentToolModuleActionsBean",
            "type": "object",
            "title": "Development Actions",
            "description": "\n\n<p>Development actions that can be performed by Jira users.</p>\n<p>Each action is optional (unless indicated otherwise). The absence of an action indicates that the action is not supported by the provider.</p>\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraProjectTabPanels": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "weight": {
            "type": "integer",
            "fieldDescription": "\n\n<p>Determines the order in which the tab panel's link appears in the menu or list.</p>\n\n <p>The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.</p>\n\n <p>Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items.</p>\n\n"
          },
          "conditions": {
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "properties": {
                    "conditions": {
                      "items": {
                        "type": "object",
                        "anyOf": [
                          {
                            "$ref": "#/definitions/singleCondition"
                          },
                          {
                            "properties": {
                              "conditions": {
                                "items": {
                                  "type": "object",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/singleCondition"
                                    },
                                    {
                                      "$ref": "#"
                                    }
                                  ]
                                },
                                "type": "array",
                                "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                              },
                              "type": {
                                "enum": [
                                  "and",
                                  "AND",
                                  "or",
                                  "OR"
                                ],
                                "type": "string",
                                "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                              }
                            },
                            "shortClassName": "compositeConditionBean",
                            "type": "object",
                            "title": "Composite Condition",
                            "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                          }
                        ]
                      },
                      "type": "array",
                      "fieldDescription": "\n\nThe conditions to compose using the specific logical operator.\n\n"
                    },
                    "type": {
                      "enum": [
                        "and",
                        "AND",
                        "or",
                        "OR"
                      ],
                      "type": "string",
                      "fieldDescription": "\n\nDefines what logical operator is used to evaluate its collection of condition elements.\n\n"
                    }
                  },
                  "shortClassName": "compositeConditionBean",
                  "type": "object",
                  "title": "Composite Condition",
                  "description": "\n\nComposite Conditions are composed of a collection of [Single Condition](../single-condition/) / Composite Conditions\n and a type attribute.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"conditions\": [\n        {\n          \"or\": [\n            {\n              \"condition\": \"can_attach_file_to_issue\",\n              \"invert\": false\n            },\n            {\n              \"condition\": \"is_issue_assigned_to_current_user\",\n              \"invert\": false\n            }\n          ]\n        },\n        {\n          \"condition\": \"user_is_logged_in\",\n          \"invert\": false\n        }\n      ]\n    }\n\n\n"
                },
                {
                  "properties": {
                    "condition": {
                      "maxLength": 100,
                      "type": "string",
                      "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
                    },
                    "invert": {
                      "type": "boolean",
                      "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                      "defaultValue": "false"
                    },
                    "params": {
                      "additionalProperties": true,
                      "type": "object",
                      "fieldTitle": "Object",
                      "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
                    }
                  },
                  "required": [
                    "condition"
                  ],
                  "shortClassName": "singleConditionBean",
                  "type": "object",
                  "title": "Single Condition",
                  "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
                }
              ]
            },
            "type": "array",
            "fieldDescription": "\n\n<a href=\"../../conditions/\">Conditions</a> can be added to display only when all the given conditions are true.\n\n"
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "fieldTitle": "Object",
            "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
          },
          "url": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nSpecifies the URL targeted by the tab panel. The URL is relative to the add-on's base URL.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          },
          "singleCondition": {
            "properties": {
              "condition": {
                "maxLength": 100,
                "type": "string",
                "fieldDescription": "\n\nA string indicating the name of the condition\n\n"
              },
              "invert": {
                "type": "boolean",
                "fieldDescription": "\n\nA flag indicating whether to invert the boolean result of the condition.\n\n",
                "defaultValue": "false"
              },
              "params": {
                "additionalProperties": true,
                "type": "object",
                "fieldTitle": "Object",
                "fieldDescription": "\n\nThis object represents a map of key/value pairs, where each property name and value corresponds to the parameter name and value respectively.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"params\": {\n        \"someOtherProperty\": \"someValue\",\n        \"myCustomProperty\": \"myValue\"\n      }\n    }\n\n\n"
              }
            },
            "required": [
              "condition"
            ],
            "shortClassName": "singleConditionBean",
            "type": "object",
            "title": "Single Condition",
            "description": "\n\nSingle Conditions are either provided by the host application. See the complete documentation of\n [Conditions](../../conditions/) for more information.\n\n To invert a condition, add the attribute ``invert=\"true\"`` to the condition element.\n This is useful where you want to show the section if a certain condition is not satisfied.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"condition\": \"user_is_logged_in\",\n      \"invert\": false\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraGlobalPermissions": {
      "schema": {
        "properties": {
          "defaultGrants": {
            "items": {
              "enum": [
                "none",
                "NONE",
                "jira-administrators",
                "JIRA-ADMINISTRATORS",
                "all",
                "ALL"
              ],
              "type": "string"
            },
            "type": "array",
            "fieldDescription": "\n\nSpecifies group of users that will be granted this permissions when the add-on is first installed.\n\n Allowed values:\n\n  * `NONE` - Permission will not be granted to anyone by default\n  * `ALL`  -  If `anonymousAllowed` is set to true, every user, both logged in and anonymous, will be granted the permission.\n            Otherwise, permission will be granted to every user with application role assigned.\n  * `JIRA-ADMINISTRATORS` - Every user with jira administration permission will be granted this permission.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nDescription of the global permission. It will be displayed under the permission's name.\n\n"
          },
          "anonymousAllowed": {
            "type": "boolean",
            "fieldDescription": "\n\nSpecifies if this permission can be granted to anonymous users.\n\n",
            "defaultValue": "true"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueFields": {
      "schema": {
        "properties": {
          "template": {
            "properties": {
              "type": {
                "enum": [
                  "link",
                  "LINK"
                ],
                "type": "string",
                "fieldDescription": "\n\nType of the template.\n\n"
              },
              "url": {
                "type": "string",
                "fieldDescription": "\n\n<p>\n     If the type is 'link' then this specifies the URL template for the link.\n     It is possible to use <a href=\"../../context-parameters/\">context parameters</a> in the template.\n </p>\n\n <p>\n     The URL may be relative or absolute. If it is the former, then the Jira context path will be prepended automatically.\n </p>\n\n <p>\n     The following context parameters are available:\n     <ul>\n         <li>option.id, option.key, option.properties</li>\n         <li>issue.id, issue.key</li>\n         <li>project.id, project.key</li>\n         <li>user.id (deprecated), user.name (deprecated), user.accountId</li>\n     </ul>\n\n"
              }
            },
            "required": [
              "type",
              "url"
            ],
            "shortClassName": "issueFieldTemplateBean",
            "type": "object",
            "title": "Issue Field Template",
            "description": "\n\nDefines the template used to render issue field options in the UI view.\n\n",
            "fieldDescription": "\n\nThe template used to render options. This is only valid when the `type` is `single_select` or `multi_select`.\n\n"
          },
          "property": {
            "properties": {
              "path": {
                "type": "string",
                "fieldDescription": "\n\nThe path to the value in the JSON object.\n\n For instance, for JSON <code>\"{\"label\": {\"color\": \"red\", \"text\":\"connect\"}}</code> the valid path\n referencing the color is <code>label.color</code>.\n\n"
              },
              "type": {
                "enum": [
                  "number",
                  "NUMBER",
                  "string",
                  "STRING",
                  "date",
                  "DATE"
                ],
                "type": "string",
                "fieldDescription": "\n\nThe type of the referenced value. It will affect how the value is interpreted and displayed,\n and how the field behaves in JQL.\n\n The type can be one of the following:\n\n * `number`, which is displayed as a number and allows the range ordering and searching on this field.\n * `string`, which supports a string, for example <code>\"example text\"</code>, and a list of strings, for example <code>[\"example text1\", \"example text2\"]</code>.\n             The string is displayed as is and enables a search for matching phrases. The list is displayed as comma-separated values and enables a search for matches to any phrase from the list.\n * `date`, which is displayed as a date with time and allows date-based searching.\n\n    The value is expected to be a date string in one of the following formats:\n      * [YYYY]-[MM]-[DD]\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]Z\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]+[hh]:[mm]\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]-[hh]:[mm]\n\n   See [ISO_8601 standard](http://www.w3.org/TR/NOTE-datetime) for reference.\n\n"
              },
              "key": {
                "type": "string",
                "fieldDescription": "\n\nThe key of the issue property.\n\n"
              }
            },
            "required": [
              "path",
              "type",
              "key"
            ],
            "shortClassName": "issueFieldPropertyBean",
            "type": "object",
            "title": "Issue Field Property",
            "description": "\n\nDefines an issue property that will store the value for the issue field of the `read_only` type.\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"path\": \"comments.count\",\n      \"key\": \"statistics\",\n      \"type\": \"number\"\n    }\n\n\n",
            "fieldDescription": "\n\nThe property that stores the field value.\n\n Required when the `type` is `read_only`, otherwise not used.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nDescription of the issue field. This will be displayed for the user under the field in the create or edit issue view.\n\n"
          },
          "type": {
            "enum": [
              "string",
              "STRING",
              "text",
              "TEXT",
              "rich_text",
              "RICH_TEXT",
              "single_select",
              "SINGLE_SELECT",
              "multi_select",
              "MULTI_SELECT",
              "number",
              "NUMBER",
              "read_only",
              "READ_ONLY"
            ],
            "type": "string",
            "fieldDescription": "\n\nThe type of the field. The following types are available:\n\n * `number` Allows to set a number.\n * `string` Allows to set a string, supports exact matches in JQL.\n * `text` Allows to set a string, supports fuzzy search in JQL (with the \"~\" operator).\n * `rich_text` Allows to set multi-line text in Jira, and supports fuzzy search in JQL. Note: If you migrate from `text` to `rich_text` for an already existing field, the data won't be migrated.\n * `single_select` Allows to select one value from a predefined set. The [Issue field options](/cloud/jira/platform/rest/v2/#api-group-Issue-field-options) REST API can be user to manage available values.\n * `multi_select` Allows to select multiple values from a predefined set. The [Issue field options](/cloud/jira/platform/rest/v2/#api-group-Issue-field-options) REST API can be used to manage available values.\n * `read_only` Displays a given issue property, not editable by users.\n\n"
          },
          "extractions": {
            "items": {
              "properties": {
                "path": {
                  "type": "string",
                  "fieldDescription": "\n\nThe path to the JSON data which is supposed to be indexed.\n\n For instance, for JSON <code>\"{\"label\": {\"color\": \"red\", \"text\":\"connect\"}}</code> the valid path\n referencing the color is label.color.\n\n Currently, specifying of index for JSON arrays and first level JSON (such as \"true\") is not supported.\n The JSON needs to be an object with properties.\n\n"
                },
                "name": {
                  "type": "string",
                  "fieldDescription": "\n\nThe name, under which this property will be searchable with JQL. If not given, the <pre>path</pre> will be used.\n For a field with name Field Name, and an extraction with name ExtractionName the resulting query string will be\n \"Field Name\".ExtractionName.\n\n"
                },
                "type": {
                  "enum": [
                    "number",
                    "NUMBER",
                    "text",
                    "TEXT",
                    "string",
                    "STRING",
                    "user",
                    "USER",
                    "date",
                    "DATE"
                  ],
                  "type": "string",
                  "fieldDescription": "\n\nThe type of the referenced value.\n\n The type can be one of the following values:\n\n * `number`, which is indexed as a number and allows the range ordering and searching on this field.\n * `text`, which is tokenized before indexing and allows searching for particular words.\n * `string` which is indexed as is and allows searching for the exact phrase only.\n * `user`, which is indexed as a user and allows user-based searching. The expected value is an _account ID_ string (a universal Atlassian user identifier).\n * `date`, which is indexed as a date with time and allows date-based searching.\n\n    The value is expected to be a date string in one of the following formats:\n      * [YYYY]-[MM]-[DD]\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]Z\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]+[hh]:[mm]\n      * [YYYY]-[MM]-[DD]T[hh]:[mm]-[hh]:[mm]\n\n   See [ISO_8601 standard](http://www.w3.org/TR/NOTE-datetime) for reference.\n\n"
                }
              },
              "required": [
                "path",
                "type"
              ],
              "shortClassName": "issueFieldValueExtractionBean",
              "type": "object",
              "title": "Issue Field Option Property Index",
              "description": "\n\nDefines an issue field option property to be indexed by Jira. An option can contain an additional properties object.\n In this bean, you can define which properties will be extracted, so that a user will be able to search for issues which have options set that have a certain property.\n\n <p>\n     Note that `multi_select` fields may have more than one option selected. In that case, properties from all options\n     are indexed. Each Option's properties should have the same structure to be indexed properly, i.e. the types of values\n     across all options' properties should not differ. If they do, Jira will still try to act smart and do the most reasonable thing,\n     but the results are not guaranteed.\n </p>\n\n <p><b>Example</b></p>\n\n\n\n\n\n    {\n      \"path\": \"category\",\n      \"type\": \"text\",\n      \"name\": \"categoryName\"\n    }\n\n\n"
            },
            "type": "array",
            "fieldDescription": "\n\nExtractions used for JQL search. This is valid only when the `type` is `single_select` or `multi_select`.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraIssueTypes": {
      "schema": {
        "properties": {
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          },
          "description": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nDescription of the issue type.\n Currently it does not support i18n\n\n"
          },
          "type": {
            "enum": [
              "standard",
              "STANDARD",
              "subtask",
              "SUBTASK"
            ],
            "type": "string",
            "fieldDescription": "\n\nType of issue-type standard or subtask\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:jiraTimeTrackingProviders": {
      "schema": {
        "properties": {
          "adminPageKey": {
            "type": "string",
            "fieldDescription": "\n\nIf provided, this needs to reference an existing `adminPage` module defined by the same add-on.\n Jira will link the referenced `adminPage` module as the configuration page of this time tracking module.\n\n"
          },
          "name": {
            "$ref": "#/definitions/i18nProperty",
            "fieldDescription": "\n\nA human readable name.\n\n"
          }
        },
        "definitions": {
          "i18nProperty": {
            "properties": {
              "value": {
                "maxLength": 1500,
                "type": "string",
                "fieldDescription": "\n\nThe human-readable default value. This will be used if no translation exists.\n Only the following HTML tags are supported: `b`, `i`, `strong`, `em`, and `code`.\n\n"
              },
              "i18n": {
                "maxLength": 300,
                "type": "string",
                "fieldDescription": "\n\nThe localization key for the human-readable value.\n <a href=\"../../internationalization/\">Translations</a> for the keys are defined at the top level of the\n <a href=\"../../add-on-descriptor/\">add-on descriptor</a>.\n\n"
              }
            },
            "required": [
              "value"
            ],
            "shortClassName": "i18nProperty",
            "type": "object",
            "title": "i18n Property",
            "description": "\n\nRepresents a string that can be resolved via a localization properties file. You can use the same `i18n Property` key\n and value in multiple places if you like, but identical keys must have identical values.\n\n <h3>Example</h3>\n\n\n\n\n\n    {\n      \"value\": \"My text\"\n    }\n\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    },
    "connect-jira:lifecycle": {
      "schema": {
        "properties": {
          "installed": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nWhen a Connect add-on is installed, a synchronous request is fired to this URL to initiate the installation\n handshake. In order to successfully complete installation, the add-on must respond with either a\n <code>200 OK</code> or <code>204 No Content</code> status.\n\n<div class=\"aui-message warning\">\n    <p class=\"title\">\n        <span class=\"aui-icon icon-warning\">Warning</span>\n        <strong>Important</strong>\n    </p>\n    Upon successful registration, the add-on must return either a <code>200 OK</code> or <code>204 No Content</code>\n    response code, otherwise the operation will fail and the installation will be marked as incomplete.\n</div>\n\n"
          },
          "disabled": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nFires when an add on has been successfully disabled. This is an asynchronous notification event.\n\n"
          },
          "dare-migration": {
            "type": "string",
            "fieldDescription": "\n\nUsed DaRe app migration service to trigger migrations events\n\n"
          },
          "uninstalled": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nFires when an add on has been successfully un-installed. This is an asynchronous notification event.\n\n"
          },
          "enabled": {
            "format": "uri",
            "type": "string",
            "fieldDescription": "\n\nFires when an add on has been successfully enabled. This is an asynchronous notification event.\n\n"
          }
        }
      },
      "tags": [
        "forge"
      ]
    }
  }
}